To demonstrate how memory and process management
There are six processes in the system: proc1 to proc6

Memory management is implemented by a linklist of memory blocks, as well as a priority queue to keep track of the blocked processes.
Process management is implemented by a priority queue to make sure that we always switch to a process with the highest priority.

We decided to put our linkedlist and priority queues in the heap to prevent other memories overwriting them.

We check for preemption when a priority of a process is set or a process is unblocked
We preempt in the case that the priority of the peak of the ready queue is higher than the current runnig process

If all the processes are blocked, we run the NULL process

If a process request a memory block and there are no more memory in our linkedlist, we block the process until another process releases its memory.
We a process releases its memory, we preempt to check if the unblocked process has a higher priority than the current running process.

To test our code, we have 6 test cases with 6 processes each:

proc1 prints lower case letters a-j
proc2 prints number 0-9
proc3 prints upper case letters A-J
proc4 prints lower case letters l-u
proc5 and proc6 are dummy processes